ANSIBLE
********
  > Ansible required Python to make the use of modules on client machines. 
  > Ansible also works with a system which doesn’t have python installed using the “raw” module
  > Ansible uses modules, playbooks (a small piece of YAML code) to perform the specific task on all the ansible clients.
  > Ansible can use in different environments OS, Hypervisor[vmware, libvirt(kvm), RHEV,QEMU(XEN),vagrant], cloud platforms(AWS,
    Google cloud, Microsoft Azure, openstack).
  > Ansible engine doesn't support it on Windows, Solaris, AIX. But there are no restrictions to participate as ansible clients.
  > Ansible uses the SSH  protocol to manage the Unix and Linux servers. Windows Servers can be managed by using “WinRM”.
  
Validating the localhost by passing ping
  $ ansible localhost -m ping
  
Default Ansible Inventory File : 
  /etc/ansible/hosts
  
  Ex: [ABC-APP1-QUT]
      uaans
  Here “ABC-APP1-QUT” is group name and “uaans” is a server which is part of that.
  
Ansible – Command vs Shell vs Raw Modules
  > Ansible uses modules to complete the task on the remote server
    > command module - default module
      ex: $ ansible uaans -a "who -r"
          $ ansible uaans -a "who -r" -o [make the output in single line]
          
    > Raw module [if client doesn't install python need to pass raw module]
      $ ansible uaans69 -m raw -a "who -r"
      
    > Shell module [It is very useful when you want to use redirections and shell’s inbuilt functionality]
      $ ansible -m shell -a "df -h|grep sda2" uaans69
      
  
Commands
  > List all the hosts which are added into the hosts file
    $ ansible all --list-hosts
    
  > List using the group names
    $ ansible ABC-APP1-QUT --list-hosts
    
  > Login to Ansible server and run “uptime” command in ad-hoc mode
    $ ansible all -a 'uptime'
    
  > To align the output in one line, use “-o” option
    $ ansible all -a 'uptime' -o
    
  > Finds the user which is configured with ansible for passwordless authentication
    $  ansible all -a "whoami"
    
  > using the “-b” option to gain the elevated access/root access
    $  ansible all -b -a "whoami"
    
  > Install Apache package using “ad-hoc” command
    $ ansible all -b -m yum -a "name=httpd state=present"
    
  > Create a blank file on the host (uaans69) with a given path using ansible
    $ ansible uaans69 -m file -a 'path=/var/tmp/ansible_test.txt state=touch'
    
  > change the file permission and ownership
    $ ansible uaans69 -b -m file -a 'path=/var/tmp/ansible_test.txt owner=root group=root mode=0644'
    
  > Remove the newly created file and verify by directly logging in to the host
    $ ansible uaans69 -m file -a 'path=/var/tmp/ansible_test.txt state=absent'
    
  > create a soft link on the host
    $ ansible uaans69 -m file -a 'src=/etc/hosts dest=/var/tmp/hosts state=link'
    
  > Create a new directory
    $ ansible uaans69 -m file -a 'path=/var/tmp/archive state=directory'
    
  > ” copy ” Module- Copies files to remote locations
    $ ansible uaans69 -m copy -a 'src=/etc/hosts dest=/etc/hosts'
    
  > Take the backup of any configuration file before editing it
    $ ansible uaans69 -b -m copy -a 'src=/etc/hosts dest=/etc/hosts backup=yes'
    
Playbook ? Play with Tasks & Handlers
**************************************
> Playbook - It is an orchestration language of Ansible and it’s expressed in YAML format
    
  > Ansible modules are the tools in your workshop
  > playbooks are your instruction manuals
  > YAML (Yet Another Markup Language) is human-readable data serialization language
  
> Create a new playbook to install “httpd” on Linux servers.
  
  ---

  - hosts: all
    become: yes

    tasks:
      - name: Install the latest version of Apache
        yum: name=httpd state=latest update_cache=yes
        
  >Playbook should always start with three “–” and follow with mandatory hosts field which starts with “–“.
  >For package management, we need to gain the root privileges. “become: yes”
   tasks: List of tasks that you would like to perform on the client nodes. You must provide the unique name for each task. 
   In the Second line, we are using “yum” module to install the “httpd” version should be latest and requested to update the cache.
   
  > Execute the playbook to deploy Apache on all the list of servers
    $ ansible-playbook -i lin-servers install_httpd.yaml  [lin-servers file having the server list]
    
  > verify work
    #ansible -i lin-servers all -b -a -m raw 'rpm -qa | grep -i httpd' 
    
  > explore writing the playbook
    ---
    
     - hosts: all
       become:yes
       
       tasks:
        - name: Install the latest version of apache
          yum: name=httpd version=latest update_cache=yes
          ignore_errors: yes
          notify: start apache
          
       handlers:
        - name: start apache
          service: name=httpd enabled=yes state=sarted
          
       > Execute above playbook
         $ ansible-playbook install_httpd.yaml -i lin-servers.1
         
       > verify the work
         $ ansible -a "systemctl status httpd" -i lin-servers.1  all
          
        
        
          
